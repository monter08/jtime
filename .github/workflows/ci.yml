name: Build and Version

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Check code format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose

      - name: Extract version
        id: version
        run: |
          VERSION=$(grep -m1 'version = ' Cargo.toml | cut -d '"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Detected version: $VERSION"

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Extract version
        id: version
        run: |
          VERSION=$(grep -m1 'version = ' Cargo.toml | cut -d '"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Creating release for version: $VERSION"

      - name: Check for existing tag
        id: check_tag
        run: |
          git fetch --tags
          if git tag -l "v${{ env.VERSION }}" | grep -q "v${{ env.VERSION }}"; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
            echo "Tag v${{ env.VERSION }} already exists"
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
            echo "Tag v${{ env.VERSION }} doesn't exist yet"
          fi

      - name: Create Release
        if: env.TAG_EXISTS == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
